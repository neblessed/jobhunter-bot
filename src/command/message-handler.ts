import {Command} from "./command";
import {Markup, Telegraf} from "telegraf";
import {IBotContext} from "../context/context.interface";
import {Menu} from "../keyboards/menu";
import {FilterMessages} from "../messages/filter-messages";
import {actions} from "../utils/actions/filter.actions";
import {FilterController} from "../controllers/filter/filter.controller";
import {adminUsernames} from "../controllers/auth/admin-settings";


export class MessageHandler extends Command {
    private menu = new Menu();
    private filterMessages = new FilterMessages();
    private filterController = new FilterController();

    constructor(bot: Telegraf<IBotContext>) {
        super(bot);
    }

    handle(): void {
        /**
         * start
         */
        this.bot.start((ctx) => {
            ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${ctx.from.username}! –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é üëáüèº`, this.menu.mainMenu)
        })

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–í–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π ‚ñ∂"
         */
        this.bot.hears('–í–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π ‚ñ∂', (ctx) => {
            const userFilter = this.filterController.getUserFilterFromStorage(ctx.chat.id);
            if (userFilter) {
                ctx.reply('–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úî', Markup.keyboard(['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ ‚è∏']).resize());

                this.bot.hears('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ ‚è∏', (ctx) => {
                    ctx.reply('–ü–æ–∏—Å–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úî', this.menu.mainMenu);
                })
            } else {
                ctx.reply('–í—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ ‚ùå');
            }
        });

        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–§–∏–ª—å—Ç—Ä ‚ö°"
         */
        this.bot.hears('–§–∏–ª—å—Ç—Ä ‚ö°', (hearsCtx) => {
            const userId = hearsCtx.update.message.from.id;
            console.log('test', userId)
            hearsCtx.reply('–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ üõ∞', this.menu.filterMenu);

            /**
             * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä üëÄ"
             */
            this.bot.hears('–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä üëÄ', (ctx) => {
                const userFilter = this.filterController.getUserFilterFromStorage(userId);

                if (userFilter) {
                    ctx.reply(`–ü–æ–∑–∏—Ü–∏—è: ${userFilter.position}\n–ì—Ä–µ–π–¥: ${userFilter.grade}\n–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: ${userFilter.type}\n–ó–ü: ${userFilter.salary}\n–õ–æ–∫–∞—Ü–∏—è: ${userFilter.location}\n–Ø–ü: ${userFilter.lang}`);
                } else {
                    ctx.reply('–í—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ ‚ùå');
                }
            });

            /**
             * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä üóë"
             */
            this.bot.hears('–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä üóë', (ctx) => {
                ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä?\n\n–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç', Markup.inlineKeyboard([Markup.button.callback('–î–∞', 'delete-filter'), Markup.button.callback('–ù–µ—Ç', 'discard-filter-delete')]));

                this.bot.action('delete-filter', (ctx) => {
                    this.filterController.deleteInStorage(ctx.chat!.id);
                    ctx.editMessageText('–§–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π üåê');
                })

                this.bot.action('discard-filter-delete', (ctx) => {
                    ctx.deleteMessage(ctx.update.callback_query.message!.message_id)
                })
            });

            this.bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üö™', (ctx) => {
                ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üåé', this.menu.mainMenu);
            });
        });


        /**
         * Hear command "–°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä üìü" and handle all actions
         * Here is creating user filter
         */
        this.bot.hears('–°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä üìü', (ctx) => {
            const userId = ctx.chat.id;
            const userFilter = this.filterController.getUserFilterFromStorage(userId);

            if (userFilter) {
                ctx.reply('–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä. –£–¥–∞–ª–∏—Ç–µ –µ–≥–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ‚öô');
            } else {
                this.filterMessages.jobPosition(ctx);
                /**
                 * Handle "position" actions
                 */
                this.bot.action(actions.position.qa, (ctx) => {
                    this.filterController.addKeyInFilter('user_id', userId)
                    this.filterController.addKeyInFilter('position', 'QA Engineer');
                    this.filterMessages.grade(ctx);
                });
                this.bot.action(actions.position.aqa, (ctx) => {
                    this.filterController.addKeyInFilter('user_id', userId)
                    this.filterController.addKeyInFilter('position', 'QA Automation');
                    this.filterMessages.grade(ctx);
                });
                this.bot.action(actions.position.feDev, (ctx) => {
                    this.filterController.addKeyInFilter('user_id', userId)
                    this.filterController.addKeyInFilter('position', 'Frontend Developer');
                    this.filterMessages.grade(ctx);
                });
                this.bot.action(actions.position.beDev, (ctx) => {
                    this.filterController.addKeyInFilter('user_id', userId)
                    this.filterController.addKeyInFilter('position', 'Backend Developer');
                    this.filterMessages.grade(ctx);
                });

                /**
                 * Handle "grade" actions
                 */
                this.bot.action(actions.grade.trainee, (ctx) => {
                    this.filterController.addKeyInFilter('grade', 'Trainee');
                    this.filterMessages.type(ctx);
                });
                this.bot.action(actions.grade.junior, (ctx) => {
                    this.filterController.addKeyInFilter('grade', 'Junior');
                    this.filterMessages.type(ctx);
                });
                this.bot.action(actions.grade.middle, (ctx) => {
                    this.filterController.addKeyInFilter('grade', 'Middle');
                    this.filterMessages.type(ctx);
                });
                this.bot.action(actions.grade.senior, (ctx) => {
                    this.filterController.addKeyInFilter('grade', 'Senior');
                    this.filterMessages.type(ctx);
                });
                this.bot.action(actions.grade.lead, (ctx) => {
                    this.filterController.addKeyInFilter('grade', 'Lead');
                    this.filterMessages.type(ctx);
                });

                /**
                 * Handle "job type" actions
                 */
                this.bot.action(actions.type.noMatter, (ctx) => {
                    this.filterController.addKeyInFilter('type', '–ù–µ –≤–∞–∂–Ω–æ');
                    this.filterMessages.location(ctx);
                });
                this.bot.action(actions.type.office, (ctx) => {
                    this.filterController.addKeyInFilter('type', '–û—Ñ–∏—Å');
                    this.filterMessages.location(ctx);
                });
                this.bot.action(actions.type.hybrid, (ctx) => {
                    this.filterController.addKeyInFilter('type', '–ì–∏–±—Ä–∏–¥');
                    this.filterMessages.location(ctx);
                });
                this.bot.action(actions.type.remote, (ctx) => {
                    this.filterController.addKeyInFilter('type', '–£–¥–∞–ª–µ–Ω–Ω–æ');
                    this.filterMessages.location(ctx);
                });

                /**
                 * Handle "location" actions
                 */
                this.bot.action(actions.location.noMatter, (ctx) => {
                    this.filterController.addKeyInFilter('location', '–ù–µ –≤–∞–∂–Ω–æ');
                    this.filterMessages.salary(ctx);
                });
                this.bot.action(actions.location.ru, (ctx) => {
                    this.filterController.addKeyInFilter('location', '–†–æ—Å—Å–∏—è');
                    this.filterMessages.salary(ctx);
                });
                this.bot.action(actions.location.rb, (ctx) => {
                    this.filterController.addKeyInFilter('location', '–ë–µ–ª–∞—Ä—É—Å—å');
                    this.filterMessages.salary(ctx);
                });
                this.bot.action(actions.location.kz, (ctx) => {
                    this.filterController.addKeyInFilter('location', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω');
                    this.filterMessages.salary(ctx);
                });
                this.bot.action(actions.location.rs, (ctx) => {
                    this.filterController.addKeyInFilter('location', '–°–µ—Ä–±–∏—è');
                    this.filterMessages.salary(ctx);
                });
                this.bot.action(actions.location.tr, (ctx) => {
                    this.filterController.addKeyInFilter('location', '–¢—É—Ä—Ü–∏—è');
                    this.filterMessages.salary(ctx);
                });
                this.bot.action(actions.location.de, (ctx) => {
                    this.filterController.addKeyInFilter('location', '–ì–µ—Ä–º–∞–Ω–∏—è');
                    this.filterMessages.salary(ctx);
                });
                this.bot.action(actions.location.uk, (ctx) => {
                    this.filterController.addKeyInFilter('location', '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è');
                    this.filterMessages.salary(ctx);
                });
                this.bot.action(actions.location.usa, (ctx) => {
                    this.filterController.addKeyInFilter('location', '–°–®–ê');
                    this.filterMessages.salary(ctx);
                });

                /**
                 * Handle "salary" actions
                 */
                this.bot.action(actions.salary.noMatter, (ctx) => {
                    this.filterController.addKeyInFilter('salary', '–ù–µ –≤–∞–∂–Ω–æ');
                    this.filterMessages.programmingLanguage(ctx);
                });
                this.bot.action(actions.salary.k80, (ctx) => {
                    this.filterController.addKeyInFilter('salary', '–æ—Ç 80k RUB');
                    this.filterMessages.programmingLanguage(ctx);
                });
                this.bot.action(actions.salary.k150, (ctx) => {
                    this.filterController.addKeyInFilter('salary', '–æ—Ç 150k RUB');
                    this.filterMessages.programmingLanguage(ctx);
                });
                this.bot.action(actions.salary.k250, (ctx) => {
                    this.filterController.addKeyInFilter('salary', '–æ—Ç 250k RUB');
                    this.filterMessages.programmingLanguage(ctx);
                });

                /**
                 * Handle "programming language" actions
                 */
                this.bot.action(actions.lang.noMatter, (ctx) => {
                    this.filterController.addKeyInFilter('lang', '–ù–µ –≤–∞–∂–Ω–æ');
                    this.filterMessages.filterResult(ctx, this.filterController.getCurrentFilter());
                });
                this.bot.action(actions.lang.java, (ctx) => {
                    this.filterController.addKeyInFilter('lang', 'Java');
                    this.filterMessages.filterResult(ctx, this.filterController.getCurrentFilter());
                });
                this.bot.action(actions.lang.jsTs, (ctx) => {
                    this.filterController.addKeyInFilter('lang', 'JS/TS');
                    this.filterMessages.filterResult(ctx, this.filterController.getCurrentFilter());
                });
                this.bot.action(actions.lang.python, (ctx) => {
                    this.filterController.addKeyInFilter('lang', 'Python');
                    this.filterMessages.filterResult(ctx, this.filterController.getCurrentFilter());
                });
                this.bot.action(actions.lang.kotlin, (ctx) => {
                    this.filterController.addKeyInFilter('lang', 'Kotlin');
                    this.filterMessages.filterResult(ctx, this.filterController.getCurrentFilter());
                });
                this.bot.action(actions.lang.golang, (ctx) => {
                    this.filterController.addKeyInFilter('lang', 'Golang');
                    this.filterMessages.filterResult(ctx, this.filterController.getCurrentFilter());
                });
                this.bot.action(actions.lang.c, (ctx) => {
                    this.filterController.addKeyInFilter('lang', 'C');
                    this.filterMessages.filterResult(ctx, this.filterController.getCurrentFilter());
                });
            }

            /**
             * Handle filter create actions
             */
            this.bot.action('create-filter', (ctx) => {
                try {
                    this.filterController.addInStorage(this.filterController.getCurrentFilter());
                    ctx.editMessageText('–§–∏–ª—å—Ç—Ä —Å–æ–∑–¥–∞–Ω üéâ\n–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–æ–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π!');
                } catch (e) {
                    ctx.editMessageText(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: ${adminUsernames.map(admin => `@${admin} `).join('')}`);
                }

            });
            this.bot.action('revoke-filter', (ctx) => {
                this.filterController.flushCurrentFilter();
                ctx.editMessageText('–§–∏–ª—å—Ç—Ä –æ—á–∏—â–µ–Ω ‚úî\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ.')
            });
        });
    }
}